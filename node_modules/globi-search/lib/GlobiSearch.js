var jQuery = require('jquery');
var inherits = require('util').inherits;
var EventEmitter = require('events').EventEmitter;
var PubSub = require('./Mediator.js').PubSub;
var extend = require('extend');
var forEach = require('foreach');
var globiData = require('globi-data');
var globi = require('globi');
var TypeSelector = require('./TypeSelector.js');
var TaxonSelector = require('./TaxonSelector.js');
var SearchResult = require('./SearchResult.js');

inherits(Plugin, EventEmitter);

var State = {
    source: null,
    type: null,
    target: null
}

var DataFetcher = new globi.PaginatedDataFetcher({ url: '' });

var ItemData = {
    source: {
        set: false
    },
    target: {
        set: false
    },
    link: {
        set: false
    }
};

var fetchingItemData = false;

var uuid = 0;

function Plugin(settings) {
    if (!(this instanceof Plugin)) {
        return new Plugin(settings);
    }
    this.settings = extend({

    }, settings);
    this.init();
}

extend(Plugin.prototype, {
    init: function() {
        var me = this;
        me.el = null;
        me.sourceSelector = null;
        me.targetSelector = null;
        me.typeSelector = null;
        me.searchResult = null;

        me.buildUi();
        me.events();
        me.uuid = ++uuid;
        State = {
            source: null,
            type: null,
            target: null
        };
    },

    appendTo: function(target) {
        var me = this;
        if (typeof target === 'string') target = document.querySelector(target);

        target.appendChild(me.el);
        this.emit('append', target);
    },

    events: function() {
        var me = this;
        me.addListener('globisearch:partialstatechange', me.partialStateChanged);
        me.addListener('globisearch:searchchange', me.searchChanged);
        PubSub.addListener('taxonselector:selected', proxy(me.taxonSelected, me));
        PubSub.addListener('typeselector:selected', proxy(me.typeSelected, me));
        PubSub.addListener('searchresult:itemselected', proxy(me.itemSelected, me));
    },

    update: function(data) {
        var me = this;
    },

    buildUi: function() {
        var me = this;
        var table = createElement('table', 'search-row'),
            row = createElement('table'),
            td;

        me.el = createElement('div', 'search-wrapper');

        td = createElement('td'); td.appendChild(me.createSourceSelector().el)
        row.appendChild(td);

        td = createElement('td'); td.appendChild(me.createTypeSelector().el);
        row.appendChild(td);

        td = createElement('td'); td.appendChild(me.createTargetSelector().el);
        row.appendChild(td);

        table.appendChild(row);
        me.el.appendChild(table);
        me.el.appendChild(me.createSearchResult().el);

        me.populateTypeSelector();
    },

    createTypeSelector: function() {

        this.typeSelector = new TypeSelector({
            idPrefix: 'source',
            type: 'interactiontype'
        });

        this.typeSelector.disable();

        return this.typeSelector;
    },

    createSourceSelector: function() {
        return this.sourceSelector = new TaxonSelector({
            idPrefix: 'source',
            type: 'source'
        });
    },

    createTargetSelector: function() {
        return this.targetSelector = new TaxonSelector({
            idPrefix: 'target',
            type: 'target'
        });
    },

    createSearchResult: function() {
        this.searchResult = new SearchResult({
        });

        return this.searchResult;
    },

    populateTypeSelector: function() {
        var me = this;

        globiData.findInteractionTypes(
            [],
            {
                callback: function(data) {
                    forEach(data, function(value, key, object) {
                        me.typeSelector.addOption(camelCaseToRealWords(key), key);
                    });
                    me.typeSelector.enable();
                },
                context: me
            }
        );
    },

    itemSelected: function(data) {
        var me = this;
        if (!fetchingItemData) {
            fetchingItemData = true;
            if (data['source'] && data['source']['name']) {
                globiData.findTaxonInfo(data['source']['name'], function(sourceData) {
                    me.populateItemData(sourceData, data['source']['id'], 'source');
                    if (data['target'] && data['target']['name']) {
                        globiData.findTaxonInfo(data['target']['name'], function(targetData) {
                            me.populateItemData(targetData, data['target']['id'], 'target');
                            if (data['link'] && data['link']['name']) {
                                globiData.findInteractionTypes(function(linkData) {
                                    me.populateItemData(linkData, data['link']['id'], 'link');
                                });
                            }
                        });
                    }
                });
            }
        }
    },

    populateItemData: function(data, id, type) {
        var me = this;
        switch (type) {
            case 'source':
            case 'target':
                ItemData[type] = {
                    set: true,
                    id: id,
                    label: '',
                    data: fillTemplate(data)
                };
                break;
            case 'link':
                ItemData['link'] = {
                    set: true,
                    id: id,
                    label: '<a href="' + data[id].termIRI + '">' + camelCaseToRealWords(id) + '</a>',
                    data: ''
                };
                ItemData['source'].label = data[id].source;
                ItemData['target'].label = data[id].target;
                break;
        }
        if (ItemData['source'].set && ItemData['target'].set && ItemData['link'].set) {
            me.searchResult.showItem(ItemData);
            ItemData = { source: {set: false}, target: {set: false}, link: {set: false} };
            fetchingItemData = false;
        }
    },

    /**
     * EVENT HANDLER
     */

    taxonSelected: function(event) {
        var me = this;
        if (me.uuid === uuid) {
            State[event['emitter']] = event['data'];
            me.emit('globisearch:partialstatechange');
        }
    },

    typeSelected: function(event) {
        var me = this;
        if (me.uuid === uuid) {
            State['type'] = event['data'];
            me.emit('globisearch:partialstatechange');
        }
    },

    partialStateChanged: function() {
        var me = this;
        if (me.uuid === uuid) {
            if ((State['type'] !== null) &&
                ((State['source'] !== null) || (State['target'] !== null))
            ) {
                me.emit('globisearch:searchchange', State);
            }
        }
    },

    searchChanged: function(state) {
        var me = this, url, downloadUrl;
        var searchHash = {resultType: 'json'};

        if (state['source'] !== null) {
            searchHash.sourceTaxa = [state['source']];
        }
        if (state['target'] !== null) {
            searchHash.targetTaxa = [state['target']];
        }
        searchHash.interactionType = state['type'];

        url = globiData.urlForTaxonInteractionQuery(searchHash);
        DataFetcher.settings.url = url + '&bbox=' + me.settings.spatialSelection.bbox;

        DataFetcher.fetch(function(data) {
            data = globi.ResponseMapper(data)();
            PubSub.emit('globisearch:resultsetchanged', mapData(data));
            data = processDataForResultList(data);
            searchHash.resultType = 'csv';
            searchHash.includeObservations = true;
            searchHash.fields = ['source_taxon_id', 'source_taxon_name', 'source_taxon_path', 'source_taxon_path_ids',
                'source_specimen_life_stage','source_specimen_physiological_state','source_specimen_body_part'
                , 'interaction_type'
                , 'target_taxon_id', 'target_taxon_name', 'target_taxon_path', 'target_taxon_path_ids'
                , 'target_specimen_life_stage','target_specimen_physiological_state','target_specimen_body_part'
                , 'latitude', 'longitude'
                , 'study_citation', 'study_url', 'study_source_citation'];

            downloadUrl = globiData.urlForTaxonInteractionQuery(searchHash);
            me.searchResult.clear();
            me.searchResult.showList(data, downloadUrl);
        });
    }
});

/**
 * @param elementName
 * @param id
 * @param classes
 * @returns {Element}
 */
function createElement(elementName, id, classes) {
    elementName = elementName || 'div';
    id = id || false;
    classes = classes || [];

    var div = document.createElement(elementName);
    if (id) div.id = id;
    if (classes.length > 0 ) div.className = classes.join(' ');
    return div;
}

function camelCaseToRealWords(str) {
    str = str.replace(/([A-Z])/g, function($1){return " "+$1.toLowerCase();});
    var strParts = str.split(' '), lastPart = strParts[strParts.length - 1];
    if (['of', 'by'].indexOf(lastPart) >= 0) {
        strParts.unshift('is');
    }
    return strParts.join(' ');
}

function proxy(fn, context) {
    return function() {
        return fn.apply(context, arguments);
    };
}

function processDataForResultList(data) {
    var result = [];
    forEach(data, function(item) {
        if ((item['source_taxon_external_id'] !== 'no:match') && (item['target_taxon_external_id'] !== 'no:match')) {
            result.push({
                source: {
                    id: item['source_taxon_external_id'].replace(':', '-@-'),
                    name: item['source_taxon_name']
                },
                target: {
                    id: item['target_taxon_external_id'].replace(':', '-@-'),
                    name: item['target_taxon_name']
                },
                link: {
                    id: item['interaction_type'],
                    name: camelCaseToRealWords(item['interaction_type'])
                },
            })
        }
    });

    return result;
}

function fillTemplate(data) {
    var commonName = data['commonName'] ? data['commonName'] : '',
        scientificName = data['scientificName'] ? data['scientificName'] : '',
        thumbnailURL = data['thumbnailURL'] ? data['thumbnailURL'] : '../img/no-image-available.png',
        infoURL = data['infoURL'] ? data['infoURL'] : '';

    return [
        '<div class="scientific-name">' + scientificName + '</div>',
        '<div class="taxon-image"><a target="_blank" href="' + infoURL + '"><img height="50px" src="' + thumbnailURL + '" /></a></div>',
        '<div class="common-name">' + commonName + '</div>',
        '<div class="more-info"><a target="_blank" href="' + infoURL + '">more info</a></div>'
    ].join('');
}

/**
 * @TODO Move to transformation package
 */
function mapData(data) {
    var result = [];
    forEach(data, function(item) {
        item['source'] = {
            id: item['source_taxon_external_id'],
            name: item['source_taxon_name'],
            path: item['source_taxon_path']
        };
        item['target'] = {
            id: item['target_taxon_external_id'],
            name: item['target_taxon_name'],
            path: item['target_taxon_path']
        };
        result.push(item);
    });
    return result;
};

module.exports = Plugin;