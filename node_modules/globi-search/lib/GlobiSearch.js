var jQuery = require('jquery');
var inherits = require('util').inherits;
var EventEmitter = require('events').EventEmitter;
var PubSub = require('./Mediator.js').PubSub;
var extend = require('extend');
var forEach = require('foreach');
var globiData = require('globi-data');
var globi = require('globi');
var TypeSelector = require('./TypeSelector.js');
var TaxonSelector = require('./TaxonSelector.js');
var SearchResult = require('./SearchResult.js');

inherits(Plugin, EventEmitter);

var State = {
    source: null,
    type: null,
    target: null
}

var DataFetcher = new globi.PaginatedDataFetcher({ url: '' });

function Plugin(settings) {
    if (!(this instanceof Plugin)) {
        return new Plugin(settings);
    }

    this.init();
}

extend(Plugin.prototype, {
    init: function() {
        var me = this;
        me.el = null;
        me.sourceSelector = null;
        me.targetSelector = null;
        me.typeSelector = null;
        me.searchResult = null;

        me.buildUi();
        me.events();
    },

    appendTo: function(target) {
        var me = this;
        if (typeof target === 'string') target = document.querySelector(target);

        target.appendChild(me.el);
    },

    events: function() {
        var me = this;
        me.addListener('globisearch:partialstatechange', me.partialStateChanged);
        me.addListener('globisearch:searchchange', me.searchChanged);
        PubSub.addListener('taxonselector:selected', proxy(me.taxonSelected, me));
        PubSub.addListener('typeselector:selected', proxy(me.typeSelected, me));
    },

    update: function(data) {
        var me = this;
    },

    buildUi: function() {
        var me = this;

        me.el = createElement('div', 'search-wrapper');

        me.el.appendChild(me.createSourceSelector().el);
        me.el.appendChild(me.createTypeSelector().el);
        me.el.appendChild(me.createTargetSelector().el);
        me.el.appendChild(me.createSearchResult().el);



        me.populateTypeSelector();
    },

    createTypeSelector: function() {

        this.typeSelector = new TypeSelector({
            idPrefix: 'source',
            type: 'interactiontype'
        });

        this.typeSelector.disable();

        return this.typeSelector;
    },

    createSourceSelector: function() {
        return this.sourceSelector = new TaxonSelector({
            idPrefix: 'source',
            type: 'source'
        });
    },

    createTargetSelector: function() {
        return this.targetSelector = new TaxonSelector({
            idPrefix: 'target',
            type: 'target'
        });
    },

    createSearchResult: function() {
        this.searchResult = new SearchResult({
        });

        return this.searchResult;
    },

    populateTypeSelector: function() {
        var me = this;

        globiData.findInteractionTypes(
            [],
            {
                callback: function(data) {
                    forEach(data, function(value, key, object) {
                        me.typeSelector.addOption(camelCaseToRealWords(key), key);
                    });
                    me.typeSelector.enable();
                },
                context: me
            }
        );
    },

    /**
     * EVENT HANDLER
     */

    taxonSelected: function(event) {
        var me = this;
        State[event['emitter']] = event['data'];
        me.emit('globisearch:partialstatechange');
    },

    typeSelected: function(event) {
        var me = this;
        State['type'] = event['data'];
        me.emit('globisearch:partialstatechange');
    },

    partialStateChanged: function() {
        var me = this;
        if ((State['type'] !== null) &&
            ((State['source'] !== null) || (State['target'] !== null))
        ) {
            me.emit('globisearch:searchchange', State);
        }
    },

    searchChanged: function(state) {
        var me = this, url, downloadUrl;
        var searchHash = {resultType: 'json'};

        if (state['source'] !== null) {
            searchHash.sourceTaxa = [state['source']];
        }
        if (state['target'] !== null) {
            searchHash.targetTaxa = [state['target']];
        }
        searchHash.interactionType = state['type'];

        url = globiData.urlForTaxonInteractionQuery(searchHash);
        DataFetcher.settings.url = url;

        DataFetcher.fetch(function(data) {
            searchHash.resultType = 'csv';
            searchHash.includeObservations = true;
            searchHash.fields = ['source_taxon_id', 'source_taxon_name', 'source_taxon_path', 'source_taxon_path_ids',
                'source_specimen_life_stage','source_specimen_physiological_state','source_specimen_body_part'
                , 'interaction_type'
                , 'target_taxon_id', 'target_taxon_name', 'target_taxon_path', 'target_taxon_path_ids'
                , 'target_specimen_life_stage','target_specimen_physiological_state','target_specimen_body_part'
                , 'latitude', 'longitude'
                , 'study_citation', 'study_url', 'study_source_citation'];

            downloadUrl = globiData.urlForTaxonInteractionQuery(searchHash);
            data = processDataForResultList(globi.ResponseMapper(data)());
            me.searchResult.clear();
            me.searchResult.showList(data, downloadUrl);
        });
    }
});

/**
 * @param elementName
 * @param id
 * @param classes
 * @returns {Element}
 */
function createElement(elementName, id, classes) {
    elementName = elementName || 'div';
    id = id || false;
    classes = classes || [];

    var div = document.createElement(elementName);
    if (id) div.id = id;
    if (classes.length > 0 ) div.className = classes.join(' ');
    return div;
}

function camelCaseToRealWords(str) {
    str = str.replace(/([A-Z])/g, function($1){return " "+$1.toLowerCase();});
    var strParts = str.split(' '), lastPart = strParts[strParts.length - 1];
    if (['of', 'by'].indexOf(lastPart) >= 0) {
        strParts.unshift('is');
    }
    return strParts.join(' ');
}

function proxy(fn, context) {
    return function() {
        return fn.apply(context, arguments);
    };
}

function processDataForResultList(data) {
    var result = [];
    forEach(data, function(item) {
        result.push({
            source: {
                id: item['source_taxon_external_id'].replace(':', '-@-'),
                name: item['source_taxon_name']
            },
            target: {
                id: item['target_taxon_external_id'].replace(':', '-@-'),
                name: item['target_taxon_name']
            },
            link: {
                id: item['interaction_type'],
                name: camelCaseToRealWords(item['interaction_type'])
            },
        })
    });

    return result;
}

module.exports = Plugin;