var inherits = require('util').inherits;
var EventEmitter = require('events').EventEmitter;
var PubSub = require('./Mediator.js').PubSub;
var extend = require('extend');
var forEach = require('foreach');

inherits(SearchResult, EventEmitter);

var infoBoxIsProcessing = false;

function SearchResult(settings) {
    this.settings = extend({

    }, settings);
    this.init();
}

extend(SearchResult.prototype, {
    init: function() {
        var me = this;
        me.events();
        me.el = createElement('div', 'result-list');
    },

    events: function() {
        var me = this;
        me.on('searchresult:itemclick', me.itemClicked);
    },

    clear: function() {
        var me = this;
        me.el.innerHTML = '';
    },

    /**
     * [
     *  {
     *      source: {
     *          id: sourceId,
     *          name: sourceName,
     *      },
     *      target: {
     *          id: sourceId,
     *          name: sourceName,
     *      },
     *      link: {
     *          id: interactionId,
     *          name: interactionName
     *      }
     *  }
     * ]
     * @param data
     */
    showList: function(data, downloadlink) {
        var me = this;
        if (data.length > 0) {
            var itemId, stats = { sources: [], targets: [], linkCount: 0}, row, th, sourceCell, targetCell, linkCell, odd = false;
            var table = createElement('table', 'result-list');
            var tableHead = createElement('thead');
            var tableBody = createElement('tbody');
            forEach(data, function(item) {
                itemId = [item['source'].id, item['link'].id, item['target'].id].join('---');
                if (stats['sources'].indexOf(item['source'].id) === -1) {
                    stats['sources'].push(item['source'].id);
                }
                if (stats['targets'].indexOf(item['target'].id) === -1) {
                    stats['targets'].push(item['target'].id);
                }
                stats['linkCount']++;

                row = createElement('tr', itemId, ['result-item', (odd ? 'odd' : 'even')]);
                row.addEventListener('click', function() { me.emit('searchresult:itemclick', item); });

                sourceCell = createElement('td', false, ['source-cell']);
                sourceCell.innerHTML = item['source'].name;
                targetCell = createElement('td', false, ['target-cell']);
                targetCell.innerHTML = item['target'].name;
                linkCell = createElement('td', false, ['link-cell']);
                linkCell.innerHTML = item['link'].name;

                row.appendChild(sourceCell);
                row.appendChild(linkCell);
                row.appendChild(targetCell);

                tableBody.appendChild(row);
                odd = !odd;
            });

            tableHead.innerHTML = [
                '<tr><th></th><th class="download"><a href="' + downloadlink + '">' + 'Download data</a></th><th></th></tr>',
                '<tr><th>' + stats['sources'].length + ' source(s)</th><th>' + stats['linkCount'] + ' interaction(s)</th><th>' + stats['targets'].length + ' target(s)</th></tr>',
            ].join('');

            table.appendChild(tableHead);
            table.appendChild(tableBody);

            me.el.appendChild(table);
        } else {
            me.el.innerHTML = 'Empty resultset';
        }
    },

    /**
     * {
     *      source: {
     *          id: sourceId,
     *          name: sourceName,
     *          data: htmlString,
     *          label: string
     *      },
     *      target: {
     *          id: sourceId,
     *          name: sourceName,
     *          data: htmlString,
     *          label: string
     *      },
     *      link: {
     *          id: interactionId,
     *          name: interactionName,
     *          data: htmlString,
     *          label: string
     *      }
     *  }
     * @param data
     */
    showItem: function(item) {
        if (!infoBoxIsProcessing) {
            infoBoxIsProcessing = true;
            var me = this, itemId, infoBox, activeRow;

            activeRow = document.getElementsByClassName('active-row');
            if (activeRow.length > 0) {
                activeRow[0].classList.remove('active-row');
            }

            itemId = [item['source'].id, item['link'].id, item['target'].id].join('---');

            infoBox = document.getElementById('info-box');
            if (infoBox) {
                infoBox.parentNode.removeChild(infoBox);
            }

            infoBox = createElement('tr', 'info-box', ['result-row']);
            infoBox.innerHTML = [
                '<td class="result-source"><div class="source-label">' + item['source'].label + '</div><div class="source-data">' + item['source'].data + '</div></td>',
                '<td class="result-link"><div class="link-label">' + item['link'].label + '</div><div class="link-data">' + item['link'].data + '</div></td>',
                '<td class="result-target"><div class="target-label">' + item['target'].label + '</div><div class="target-data">' + item['target'].data + '</div></td>',
            ].join('');

            activeRow = document.getElementById(itemId);
            activeRow.parentNode.insertBefore(infoBox, activeRow);
            activeRow.classList.add('active-row');

            infoBoxIsProcessing = false;
        }
    },

    itemClicked: function(data) {
        var me = this;
        console.log(data);
        // @todo enrich and process data - finally call me.showItem(data)
    }
});

/**
 * @param elementName
 * @param id
 * @param classes
 * @returns {Element}
 */
function createElement(elementName, id, classes) {
    elementName = elementName || 'div';
    id = id || false;
    classes = classes || [];

    var div = document.createElement(elementName);
    if (id) div.id = id;
    if (classes.length > 0 ) div.className = classes.join(' ');
    return div;
}

module.exports = SearchResult;