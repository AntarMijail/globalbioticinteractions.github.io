var fs = require('fs');
var insertCss = require('insert-css');
var inherits = require('inherits');
var EventEmitter = require('events').EventEmitter;
var AreaPicker = require('./lib/areapicker.js');
var d3 = require('globi').d3;

inherits(SpatialSelector, EventEmitter);
module.exports = SpatialSelector;

function SpatialSelector(searchContext) {
    if (!(this instanceof SpatialSelector)) return new SpatialSelector(searchContext);
    this.searchContext = searchContext;
};


SpatialSelector.prototype.appendTo = function (target) {
    if (window.google) {
        if (typeof target === 'string') target = document.querySelector(target);
        var css = fs.readFileSync(__dirname + '/style.css', 'utf8');
        insertCss(css);
        this.appendMap(target, this.searchContext.searchParameters);
        this.emit('append', target);
    } else {
        this.emit('error', target);
    }
};

SpatialSelector.prototype.appendMarkersTo = function (json, map) {
    var markers = [];
    var locations = json.data;
    for (var index in locations) {
        if (locations.hasOwnProperty(index)) {
            var location = { latitude: locations[ index ][ 0 ], longitude: locations[ index ][ 1 ] };
            markers.push(placeMarker(location, map));
        }
    }
    initializeMarkerClusterer(map, markers);
};

SpatialSelector.prototype.appendAreaPicker = function (map, params, google) {
    var picker = new AreaPicker(map, google, this.searchContext);
    if (params.bbox) {
        picker.setBounds(toLatLngBounds(params.bbox.split(','), google)).show();
        picker.control_.setActive();
        map.panToBounds(picker.bounds_);
    }
    return picker;
};

function toLatLngBounds(bbox, google) {
    return new google.maps.LatLngBounds(
        new google.maps.LatLng(bbox[ 1 ], bbox[ 0 ]),
        new google.maps.LatLng(bbox[ 3 ], bbox[ 2 ])
    );
}

SpatialSelector.prototype.appendMap = function (target, params) {
    var me = this;
    var google = window.google;
    var location = location || { latitude: 0, longitude: 0 };
    var zoom = zoom || 1;
    var options = {
        zoom: zoom,
        center: new google.maps.LatLng(location.latitude, location.longitude),
        mapTypeId: google.maps.MapTypeId.ROADMAP};
    var map = new google.maps.Map(target, options);
    me.appendAreaPicker(map, params, google);
    d3.json('http://api.globalbioticinteractions.org/locations', function (json) {
        if (json) {
            me.appendMarkersTo(json, map);
        }
    });
};

function initializeMarkerClusterer(map, markers) {
    return new MarkerClusterer(map, markers, { gridSize: 40, maxZoom: 0 });
}

function placeMarker(location, map) {
    var latLng = new google.maps.LatLng(location.latitude, location.longitude);
    return new google.maps.Marker({ position: latLng, map: map, clickable: false });
}